// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Player struct {
	Name                string  `json:"name"`
	Tag                 string  `json:"tag"`
	Rank                string  `json:"rank"`
	IconURL             *string `json:"iconUrl,omitempty"`
	MatchesPlayed       int     `json:"matchesPlayed"`
	MatchWinPct         float64 `json:"matchWinPct"`
	KillsPerMatch       float64 `json:"killsPerMatch"`
	Kd                  float64 `json:"kd"`
	Kda                 float64 `json:"kda"`
	DmgPerRound         float64 `json:"dmgPerRound"`
	HeadshotPct         float64 `json:"headshotPct"`
	FirstBloodsPerMatch float64 `json:"firstBloodsPerMatch"`
	FirstDeathsPerRound float64 `json:"firstDeathsPerRound"`
	MostKillsInMatch    int     `json:"mostKillsInMatch"`
}

type PlayerInput struct {
	Name string `json:"name"`
	Tag  string `json:"tag"`
}

type Post struct {
	ID      string    `json:"id"`
	Players []*Player `json:"players"`
	Needed  int       `json:"needed"`
	MinRank Rank      `json:"minRank"`
}

type GameMode string

const (
	GameModeRanked   GameMode = "RANKED"
	GameModeUnranked GameMode = "UNRANKED"
	GameModeSpike    GameMode = "SPIKE"
)

var AllGameMode = []GameMode{
	GameModeRanked,
	GameModeUnranked,
	GameModeSpike,
}

func (e GameMode) IsValid() bool {
	switch e {
	case GameModeRanked, GameModeUnranked, GameModeSpike:
		return true
	}
	return false
}

func (e GameMode) String() string {
	return string(e)
}

func (e *GameMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GameMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GameMode", str)
	}
	return nil
}

func (e GameMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Rank string

const (
	RankRadiant    Rank = "RADIANT"
	RankImmortal3  Rank = "IMMORTAL3"
	RankImmortal2  Rank = "IMMORTAL2"
	RankImmortal1  Rank = "IMMORTAL1"
	RankAscendant3 Rank = "ASCENDANT3"
	RankAscendant2 Rank = "ASCENDANT2"
	RankAscendant1 Rank = "ASCENDANT1"
	RankDiamond3   Rank = "DIAMOND3"
	RankDiamond2   Rank = "DIAMOND2"
	RankDiamond1   Rank = "DIAMOND1"
	RankPlat3      Rank = "PLAT3"
	RankPlat2      Rank = "PLAT2"
	RankPlat1      Rank = "PLAT1"
	RankGold3      Rank = "GOLD3"
	RankGold2      Rank = "GOLD2"
	RankGold1      Rank = "GOLD1"
	RankSilver3    Rank = "SILVER3"
	RankSilver2    Rank = "SILVER2"
	RankSilver1    Rank = "SILVER1"
	RankBronze3    Rank = "BRONZE3"
	RankBronze2    Rank = "BRONZE2"
	RankBronze1    Rank = "BRONZE1"
	RankIron3      Rank = "IRON3"
	RankIron2      Rank = "IRON2"
	RankIron1      Rank = "IRON1"
	RankUnranked   Rank = "UNRANKED"
)

var AllRank = []Rank{
	RankRadiant,
	RankImmortal3,
	RankImmortal2,
	RankImmortal1,
	RankAscendant3,
	RankAscendant2,
	RankAscendant1,
	RankDiamond3,
	RankDiamond2,
	RankDiamond1,
	RankPlat3,
	RankPlat2,
	RankPlat1,
	RankGold3,
	RankGold2,
	RankGold1,
	RankSilver3,
	RankSilver2,
	RankSilver1,
	RankBronze3,
	RankBronze2,
	RankBronze1,
	RankIron3,
	RankIron2,
	RankIron1,
	RankUnranked,
}

func (e Rank) IsValid() bool {
	switch e {
	case RankRadiant, RankImmortal3, RankImmortal2, RankImmortal1, RankAscendant3, RankAscendant2, RankAscendant1, RankDiamond3, RankDiamond2, RankDiamond1, RankPlat3, RankPlat2, RankPlat1, RankGold3, RankGold2, RankGold1, RankSilver3, RankSilver2, RankSilver1, RankBronze3, RankBronze2, RankBronze1, RankIron3, RankIron2, RankIron1, RankUnranked:
		return true
	}
	return false
}

func (e Rank) String() string {
	return string(e)
}

func (e *Rank) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Rank(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Rank", str)
	}
	return nil
}

func (e Rank) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
