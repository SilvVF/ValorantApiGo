package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"LFGbackend/graph/model"
	"LFGbackend/resolvers"
	"context"
)

// SignInAsPlayer is the resolver for the signInAsPlayer field.
func (r *mutationResolver) SignInAsPlayer(ctx context.Context, player model.PlayerInput) (*model.Player, error) {
	return resolvers.SignInAsPlayerResolver(ctx, r.Db, player, r.SessionManager)
}

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, text string) (bool, error) {
	panic("")
}

// GetPlayers is the resolver for the getPlayers field.
func (r *queryResolver) GetPlayers(ctx context.Context, players []*model.PlayerInput) ([]*model.Player, error) {
	return resolvers.GetPlayerResolver(r.Db, ctx, players)
}

// GetPosts is the resolver for the getPosts field.
func (r *queryResolver) GetPosts(ctx context.Context, count int, offset int) ([]*model.Post, error) {

	posts := r.Server.GetPosts()
	postModels := make([]*model.Post, 0, len(posts))

	if count+offset < len(posts) {
		posts = posts[offset : count+offset]
	}

	for _, v := range posts {

		players := make([]*model.PlayerName, 0, len(v.Users))

		for _, user := range v.Users {
			pn := &model.PlayerName{
				Name: user.Player.Name,
				Tag:  user.Player.Tag,
			}
			players = append(players, pn)
		}

		pm := &model.Post{
			ID:       v.ID,
			Players:  players,
			Needed:   v.Needed,
			MinRank:  v.MinRank,
			GameMode: v.GameMode,
		}
		postModels = append(postModels, pm)
	}
	return postModels, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
